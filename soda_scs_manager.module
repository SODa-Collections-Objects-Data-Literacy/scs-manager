<?php
use Drupal\block\Entity\Block;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Requirement\RequirementInterface;

/**
 * Implements hook_help().
 */
function soda_scs_manager_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    case 'help.page.soda_scs_manager':
      $output .= '<h3>' . new TranslatableMarkup('About') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('This module provides the functionality to create, validate and manage WissKI Cloud accounts.') . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Configuration') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('Configuration is done on the <a href="@settingsPage" targer="_blank">settings page</a>.', ['@settingsPage' => '/admin/config/wisski-cloud-account-manager/settings']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Create WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@createPage" targer="_blank">This page</a> allows you to create a WissKI Cloud account.', ['@createPage' => '/wisski-cloud-account-manager/create']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Validate WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@validationPage" targer="_blank">This page</a> allows you to validate your account and check the status of the provision.', ['@validationPage' => '/wisski-cloud-account-manager/validate/GsyMv5DdFhPCixL1wTLZhzFg7sVDOiHq']) . '</p>';
      break;
  }
  return $output;
}


/**
 * Implements hook_theme().
 */
function soda_scs_manager_theme($existing, $type, $theme, $path) {
  return [
    'bundle_card' => [
      'variables' => ['title' => NULL, 'description' => NULL, 'url' => NULL, 'image_url' => NULL],
    ],
    'component_card' => [
      'variables' => [
        'component' => NULL,
      ],
    ],
    'components_page' => [
      'variables' => [
        'componentsByUser' => NULL,
      ],
    ],
    'components_overview_page' => [
      'variables' => [
        'accounts' => NULL,
        'healthCheck' => NULL,],
    ],
    'components_add_page' => [
      'variables' => [
        'accounts' => NULL,
        'healthCheck' => NULL,],
    ],
    'component_status' => [
      'variables' => [
        'component' => NULL,
      ],
    ],
    'health_page' => [
      'variables' => ['healthCheck' => NULL],
    ],
    'users_page' => [
      'variables' => ['users' => NULL],
    ],

  ];
}

/**
 * Implements hook_requirements().
 */
function soda_scs_manager_requirements($phase) {
  $requirements = [];
  if ($phase == 'install' || $phase == 'runtime') {
    $theme_list = \Drupal::service('theme_handler')->listInfo();
    if (!isset($theme_list['bootstrap5'])) {
      $requirements['soda_scs_manager_theme'] = [
          'severity' => RequirementInterface::ERROR,

      ];
    }
  }
  return $requirements;
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_component_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_component') {
    // Check if the imageUrl field has a value.
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
        '#weight' => 10, // Adjust the weight as needed.
      ];
    }
  }
}

/**
 * @todo add status block programmatically.
 */
