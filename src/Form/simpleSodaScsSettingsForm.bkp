<?php

namespace Drupal\soda_scs_manager\Form;

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * SODa SCS Manager in settings form.
 *
 * Route and authentication settings for every service
 * as defined in the SODa SCS Component bundles.
 */
class SodaScsSettingsForm extends ConfigFormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId(): string {
    return 'soda_scs_manager_settings_form';
  }

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames(): array {
    return [
      'soda_scs_manager.settings',
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state): array {
    $form = parent::buildForm($form, $form_state);
    $form['bundle'] = [
      '#type' => 'select',
      '#title' => $this->t('Select a bundle'),
      '#options' => $this->getBundleOptions(),
    ];

    $currentConfig = $this->config('soda_scs_manager.settings')->get('wisski');

    $form['auth'] = [
      '#type' => 'fieldset',
      '#attributes' => ['id' => 'soda-scs--settings--subform'],
      '#title' => 'Authentication for ' . 'wisski' . ' service',
    ];

    $form['auth']['token'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Token'),
      '#parents' => ['auth','token'],
    ];

    $form['auth']['check'] = [
      '#type' => 'button',
      '#value' => $this->t('Check token'),
    ];
    $form['routes'] = [
      '#type' => 'fieldset',
      '#attributes' => ['id' => 'soda-scs--routes-subform--routes'],
      '#title' => 'Routes for ' . 'wisski'. ' service',
    ];

    $form['routes']['apiBaseRoute'] = [
      '#type' => 'textfield',
      '#title' => $this->t('API base route'),
      '#parents' => ['routes','apiBaseRoute'],
    ];

    $form['routes']['healthCheckContainer'] = [
      '#type' => 'fieldset',
      '#attributes' => ['id' => 'soda-scs--routes-subform--health-check'],
    ];
    $form['routes']['healthCheckContainer']['healthCheckPath'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Health check route path'),
      '#parents' => ['routes','healthCheckContainer','healthCheckPath'],
    ];
    $form['routes']['healthCheckContainer']['check'] = [
      '#type' => 'button',
      '#value' => $this->t('Check health'),
    ];

    $form['routes']['getAll'] = [
      '#type' => 'textfield',
      '#title' => $this->t('GET all route path'),
      '#parents' => ['routes','getAll'],
    ];
    $form['routes']['getOne'] = [
      '#type' => 'textfield',
      '#title' => $this->t('GET single route path'),
      '#parents' => ['routes','getOne'],
    ];
    $form['routes']['post'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Create route path'),
      '#parents' => ['routes','post'],
    ];
    $form['routes']['put'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Update route path'),
      '#parents' => ['routes','put'],
    ];
    $form['routes']['delete'] = [
      '#type' => 'textfield',
      '#title' => $this->t('DELETE route path'),
      '#parents' => ['routes','delete'],
    ];

    return $form;

  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state): void {
    // Load the configuration.
    $config = $this->config('soda_scs_manager.settings');

    // Retrieve the current bundle configuration.
    $current_bundle_config = $config->get($form_state->getValue('bundle'));

    // Loop through all form values and update the configuration.
    $values = $form_state->getValues();
    $config->set('wisski', $values['auth']['token']);
    $config->set('wisski', $values['routes']['apiBaseRoute']);
    $config->set('wisski', $values['routes']['healthCheckContainer']['healthCheckPath']);
    $config->set('wisski', $values['routes']['getAll']);
    $config->set('wisski', $values['routes']['getOne']);
    $config->set('wisski', $values['routes']['post']);
    $config->set('wisski', $values['routes']['put']);
    $config->set('wisski', $values['routes']['delete']);

    // Save the configuration.
    $config->save();
    ddl($form_state);
    parent::submitForm($form, $form_state);
  }

  /**
   * Retrieve bundle options.
   *
   * @return array
   */
  private function getBundleOptions(): array {
    // Retrieve and return bundle options.
    $bundles = \Drupal::service('entity_type.manager')->getStorage('soda_scs_component_bundle')->loadMultiple();
    $options = ['' => $this->t('Select a bundle')];
    foreach ($bundles as $bundle) {
      $options[$bundle->id()] = $bundle->label();
    }
    return $options;
  }
}


